{"version":3,"sources":["components/qr-result/qr-result.js","components/form-fields/form-fields.js","App.js","serviceWorker.js","index.js"],"names":["QrResult","props","state","student_id","this","qrOutput","className","src","qrcode","alt","message","undefined","student_name","college_name","React","Component","FormFields","generatedQR","collegeName","studentName","onGenerateQR","bind","handleChange","event","preventDefault","fetch","method","headers","body","JSON","stringify","then","response","json","responseJson","console","log","setState","target","name","value","style","marginTop","type","placeholder","onChange","onClick","App","Helmet","http-equiv","content","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8SAEaA,EAAb,YACE,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,GAFI,EADrB,sEAOI,IAAMC,EAAaC,KAAKH,MAAMI,SAASF,WACvC,OACE,yBAAKG,UAAU,6EACZH,EACC,yBAAKG,UAAU,kBACb,4BAAQA,UAAU,iBAChB,yBAAKC,IAAKH,KAAKH,MAAMI,SAASG,OAAQC,IAAI,OAI9C,yBAAKH,UAAU,wBACb,uBAAGA,UAAU,6BACVF,KAAKH,MAAMI,SAASK,UAI1BP,EACC,yBAAKG,UAAU,8CACb,2BAAOA,UAAU,SAAjB,eACA,uBAAGA,UAAU,2BACVF,KAAKH,MAAMI,SAASF,kBAIzBQ,EAEDR,EACC,yBAAKG,UAAU,8CACb,2BAAOA,UAAU,SAAjB,iBACA,uBAAGA,UAAU,2BACVF,KAAKH,MAAMI,SAASO,oBAIzBD,EAEDR,EACC,yBAAKG,UAAU,8CACb,2BAAOA,UAAU,SAAjB,iBACA,uBAAGA,UAAU,2BACVF,KAAKH,MAAMI,SAASQ,oBAIzBF,OAnDV,GAA8BG,IAAMC,WCCvBC,EAAb,YACE,aAAe,IAAD,8BACZ,+CACKd,MAAQ,CACXe,YAAa,KACbC,YAAa,GACbC,YAAa,IAEf,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBARR,EADhB,0EAWeE,GAAQ,IAAD,OAElB,OADAA,EAAMC,iBACCC,MAAM,kDAAmD,CAC9DC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBlB,aAAcR,KAAKF,MAAMiB,YACzBN,aAAcT,KAAKF,MAAMgB,gBAG1Ba,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CAAEpB,YAAaiB,SA1BrC,sCA6B4B,IAAXI,EAAU,EAAVA,OACblC,KAAKiC,SAAL,eACGC,EAAOC,KAAOD,EAAOE,UA/B5B,+BAoCI,IAGMvB,EACJb,KAAKF,MAAMe,aAAeb,KAAKF,MAAMe,YAAX,QAC5B,OACE,yBAAKX,UAAU,aACb,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,UACb,wBACEmC,MAVQ,CAChBC,UAAW,MAUHpC,UAAU,kEAFZ,qBASJ,yBAAKA,UAAU,2DACb,yBAAKA,UAAU,wBACb,2BAAOA,UAAU,SAAjB,gBACA,yBAAKA,UAAU,SACb,yBAAKA,UAAU,WACb,2BACEA,UAAU,QACVqC,KAAK,OACLJ,KAAK,cACLK,YAAY,uBACZJ,MAAOpC,KAAKF,MAAMiB,YAClB0B,SAAUzC,KAAKkB,kBAKvB,yBAAKhB,UAAU,wBACb,2BAAOA,UAAU,SAAjB,gBACA,yBAAKA,UAAU,SACb,yBAAKA,UAAU,WACb,2BACEA,UAAU,QACVqC,KAAK,OACLJ,KAAK,cACLK,YAAY,uBACZJ,MAAOpC,KAAKF,MAAMgB,YAClB2B,SAAUzC,KAAKkB,kBAKvB,yBAAKhB,UAAU,wBACb,uBAAGwC,QAAS1C,KAAKgB,aAAcd,UAAU,qBAAzC,gBAIF,yBAAKA,UAAU,kBACZW,EAAc,kBAAC,EAAD,CAAUZ,SAAUY,SAAkBN,SA3FjE,GAAgCG,IAAMC,WCgBvBgC,MAdf,WACE,OACE,6BACE,kBAACC,EAAA,OAAD,KACE,0BACEC,aAAW,0BACXC,QAAQ,+BAGZ,kBAAC,EAAD,QCFcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,MAAK,SAAAgC,GACjCA,EAAaC,kB","file":"static/js/main.09b34068.chunk.js","sourcesContent":["import React from \"react\";\n\nexport class QrResult extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const student_id = this.props.qrOutput.student_id;\n    return (\n      <div className=\"columns is-vcentered is-multiline has-text-centered is-mobile is-centered\">\n        {student_id ? (\n          <div className=\"column is-full\">\n            <figure className=\"image is-1by1\">\n              <img src={this.props.qrOutput.qrcode} alt=\"\" />\n            </figure>\n          </div>\n        ) : (\n          <div className=\"column is-two-thirds\">\n            <p className=\"is-size-5 has-text-danger\">\n              {this.props.qrOutput.message}\n            </p>\n          </div>\n        )}\n        {student_id ? (\n          <div className=\"column is-one-third-desktop is-full-mobile\">\n            <label className=\"label\">Student ID:</label>\n            <p className=\"has-text-info is-size-5\">\n              {this.props.qrOutput.student_id}\n            </p>\n          </div>\n        ) : (\n          undefined\n        )}\n        {student_id ? (\n          <div className=\"column is-one-third-desktop is-full-mobile\">\n            <label className=\"label\">Student Name:</label>\n            <p className=\"has-text-info is-size-5\">\n              {this.props.qrOutput.student_name}\n            </p>\n          </div>\n        ) : (\n          undefined\n        )}\n        {student_id ? (\n          <div className=\"column is-one-third-desktop is-full-mobile\">\n            <label className=\"label\">College Name:</label>\n            <p className=\"has-text-info is-size-5\">\n              {this.props.qrOutput.college_name}\n            </p>\n          </div>\n        ) : (\n          undefined\n        )}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { QrResult } from \"../qr-result/qr-result\";\n\nexport class FormFields extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      generatedQR: null,\n      collegeName: \"\",\n      studentName: \"\"\n    };\n    this.onGenerateQR = this.onGenerateQR.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  onGenerateQR(event) {\n    event.preventDefault();\n    return fetch(`http://34.238.235.212:3000/v1/api/students/save`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        student_name: this.state.studentName,\n        college_name: this.state.collegeName\n      })\n    })\n      .then(response => response.json())\n      .then(responseJson => {\n        console.log(responseJson);\n        this.setState({ generatedQR: responseJson });\n      });\n  }\n  handleChange({ target }) {\n    this.setState({\n      [target.name]: target.value\n    });\n  }\n\n  render() {\n    const headStyle = {\n      marginTop: \"3%\"\n    };\n    const generatedQR =\n      this.state.generatedQR && this.state.generatedQR[\"student\"];\n    return (\n      <div className=\"container\">\n        <div className=\"columns is-mobile\">\n          <div className=\"column\">\n            <h1\n              style={headStyle}\n              className=\"is-size-1 has-text-dark has-text-weight-bold has-text-centered\"\n            >\n              Where the Food!\n            </h1>\n          </div>\n        </div>\n\n        <div className=\"columns is-mobile is-multiline is-vcentered is-centered\">\n          <div className=\"column is-two-thirds\">\n            <label className=\"label\">Student Name</label>\n            <div className=\"field\">\n              <div className=\"control\">\n                <input\n                  className=\"input\"\n                  type=\"text\"\n                  name=\"studentName\"\n                  placeholder=\"Enter Student's Name\"\n                  value={this.state.studentName}\n                  onChange={this.handleChange}\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"column is-two-thirds\">\n            <label className=\"label\">College Name</label>\n            <div className=\"field\">\n              <div className=\"control\">\n                <input\n                  className=\"input\"\n                  type=\"text\"\n                  name=\"collegeName\"\n                  placeholder=\"Enter College's Name\"\n                  value={this.state.collegeName}\n                  onChange={this.handleChange}\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"column is-two-thirds\">\n            <a onClick={this.onGenerateQR} className=\"button is-primary\">\n              Generate QR\n            </a>\n          </div>\n          <div className=\"column is-full\">\n            {generatedQR ? <QrResult qrOutput={generatedQR} /> : undefined}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.sass\";\nimport { Helmet } from \"react-helmet\";\nimport { FormFields } from \"./components/form-fields/form-fields\";\n\nfunction App() {\n  return (\n    <div>\n      <Helmet>\n        <meta\n          http-equiv=\"Content-Security-Policy\"\n          content=\"upgrade-insecure-requests\"\n        />\n      </Helmet>\n      <FormFields />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}